package com.vergil.mvvmlazy.utils.resource

import android.content.Context
import android.text.TextUtils
import java.io.BufferedReader
import java.io.IOException
import java.io.InputStreamReader
import java.lang.AssertionError
import java.lang.StringBuilder
import java.util.ArrayList

/**
 * ResourceUtils
 * 可用于从android资源目录的raw和assets目录读取内容
 */
class ResourceUtils() {
    companion object {
        /**
         * get an asset using ACCESS_STREAMING mode. This provides access to files that have been bundled with an
         * application as assets -- that is, files placed in to the "assets" directory.
         *
         * @param context
         * @param fileName The name of the asset to open. This name can be hierarchical.
         * @return
         */
        fun geFileFromAssets(context: Context?, fileName: String?): String? {
            if (context == null || TextUtils.isEmpty(fileName)) {
                return null
            }
            val s = StringBuilder("")
            return try {
                val `in` = InputStreamReader(
                    context.resources.assets.open(
                        fileName!!
                    )
                )
                val br = BufferedReader(`in`)
                var line: String?
                while (br.readLine().also { line = it } != null) {
                    s.append(line)
                }
                s.toString()
            } catch (e: IOException) {
                e.printStackTrace()
                null
            }
        }

        /**
         * get content from a raw resource. This can only be used with resources whose value is the name of an asset files
         * -- that is, it can be used to open drawable, sound, and raw resources; it will fail on string and color
         * resources.
         *
         * @param context
         * @param resId   The resource identifier to open, as generated by the appt tool.
         * @return
         */
        fun geFileFromRaw(context: Context?, resId: Int): String? {
            if (context == null) {
                return null
            }
            val s = StringBuilder()
            return try {
                val `in` = InputStreamReader(context.resources.openRawResource(resId))
                val br = BufferedReader(`in`)
                var line: String?
                while (br.readLine().also { line = it } != null) {
                    s.append(line)
                }
                s.toString()
            } catch (e: IOException) {
                e.printStackTrace()
                null
            }
        }

        /**
         * same to [ResourceUtils.geFileFromAssets], but return type is List<String>
         *
         * @param context
         * @param fileName
         * @return
        </String> */
        fun geFileToListFromAssets(context: Context?, fileName: String?): List<String>? {
            if (context == null || TextUtils.isEmpty(fileName)) {
                return null
            }
            val fileContent: MutableList<String> = ArrayList()
            return try {
                val `in` = InputStreamReader(
                    context.resources.assets.open(
                        fileName!!
                    )
                )
                val br = BufferedReader(`in`)
                var line: String
                while (br.readLine().also { line = it } != null) {
                    fileContent.add(line)
                }
                br.close()
                fileContent
            } catch (e: IOException) {
                e.printStackTrace()
                null
            }
        }

        /**
         * same to [ResourceUtils.geFileFromRaw], but return type is List<String>
         *
         * @param context
         * @param resId
         * @return
        </String> */
        fun geFileToListFromRaw(context: Context?, resId: Int): List<String?>? {
            if (context == null) {
                return null
            }
            val fileContent: MutableList<String?> = ArrayList()
            var reader: BufferedReader? = null
            return try {
                val `in` = InputStreamReader(context.resources.openRawResource(resId))
                reader = BufferedReader(`in`)
                var line: String? = null
                while (reader.readLine().also { line = it } != null) {
                    fileContent.add(line)
                }
                reader.close()
                fileContent
            } catch (e: IOException) {
                e.printStackTrace()
                null
            }
        }
    }

    init {
        throw AssertionError()
    }
}